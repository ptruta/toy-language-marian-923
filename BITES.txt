IStmt comp = this.stack.removeLast();
        String st = ((CompStmt) comp).getStmt();
        if (st.split(" ")[0] == "If") {
            CompStmt nextComp = ((CompStmt) comp).nextCompStmt();
            String st2 = nextComp.getStmt();
            if (st2.split(" ")[0] == "Else") {
                CompStmt finalComp = nextComp.nextCompStmt();
                this.stack.addLast(finalComp);
                
            }
        }






// CompStmt comp = (CompStmt) this.stack.getLast();
        // String stmt = comp.getStmt();
        // AssignStmt assign = new AssignStmt(stmt);
        // // Creating the next compound
        // CompStmt next = comp.nextCompStmt();
        // this.stack.removeLast();
        // this.stack.addLast(next);
        // // Getting some things we'll need
        // String[] exp = assign.getWords(); // actual expression, separated
        // ISymbol sym = Eval.lookUp(this.table, exp[0]);
        // // Looking if the symbol exists
        // if (sym != null) {
        //     for (int i = 2; i < exp.length; i++) {
        //         if (exp.length == 3) {
        //             // Checking if it's just a simple assignment statement, doesn't involve other
        //             // variables.
        //             try {
        //                 Integer val = Integer.parseInt(exp[2]);
        //                 ((SymInteger) sym).setValue(val);
        //                 this.table.setSymbol(sym.getLabel(), (SymInteger) sym);
        //                 return assign;
        //             }
        //             // Checking if our symbol is assigned the value of another symbol
        //             catch (NumberFormatException e) {
        //                 ISymbol sym2 = Eval.lookUp(table, exp[2]);
        //                 if (sym2 == null) {
        //                     throw new SymbolException("Symbol with label" + exp[2] + "is not defined");
        //                 }
        //                 if (sym2.getType() != sym.getType()) {
        //                     throw new TypeException("Symbols are not of same type.");
        //                 }

        //             }
        //         }
        //     }
        // }
        



if (exp.length == 3) { // If it's just a simple assignment
                    rez = EvalUtil.convNumeric(exp[2]);
                        if (rez != null) { // Checking if we are assigning a variable only a value
                            table.setSymbol(sym.getLabel(), new SymInteger(rez, sym.getLabel()));
                            return (AssignStmt) stmt;
                        } else { // If it's not a value, than it is the value of another variable
                            rez = ((SymInteger) EvalUtil.lookUp(table, exp[2])).getValue();
                            if (rez == null) {
                                throw new SymbolException("Variable is not declared.");
                            }
                            table.setSymbol(sym.getLabel(), new SymInteger(rez, sym.getLabel()));
                            return (AssignStmt) stmt;
                        }
                    } else { // If it's a compund assingment
                        // First value of the assignment
                        rez = EvalUtil.convNumeric(exp[2]);
                        if (rez == null)
                            rez = ((SymInteger) EvalUtil.lookUp(table, exp[2])).getValue();
                        if (rez == null) {
                            throw new SymbolException("Variable is not declared.");
                        }
                        // Rest of the values
                        for (int i = 3; i < exp.length - 1; i = i + 2) {
                            ISymbol s2 = EvalUtil.lookUp(table, exp[i + 1]);
                            if (s2 != null) {
                                rez += EvalUtil.evalArithemtic(new SymInteger(0, ""), s2, exp[i]);
                            } else {
                                Integer perm = EvalUtil.convNumeric(exp[i + 1]);
                                if (perm == null) {
                                    throw new SymbolException("Variable is not declared.");
                                }
                                Integer aux = 0;
                                if (exp[i].startsWith("+")) {
                                    aux = EvalUtil.evalArithemtic(new SymInteger(0, ""),
                                            new SymInteger(perm, ""), exp[i]);
                                    if (exp[i + 2].startsWith("*") || exp[i + 2].startsWith("/")) {
                                        Integer aux2 = EvalUtil.convNumeric(exp[i + 1]);
                                        aux += EvalUtil.evalArithemtic(new SymInteger(aux2, ""),
                                                new SymInteger(EvalUtil.convNumeric(exp[i + 3]), ""), exp[i + 2]);
                                        i += 2;
                                    }
                                }
                                rez += aux;
                            }
                        }
                        table.setSymbol(sym.getLabel(), new SymInteger(rez, sym.getLabel()));